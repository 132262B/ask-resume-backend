# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
      # 코드 저장소로 부터 CI 서버로 코드 pull
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle 빌드 실행을 위한 권한을 부여
      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Spring Boot Build
        run: ./gradlew clean build #--exclude-task test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # docker 빌드
      - name: build docker
        run: ./gradlew bootBuildImage --imageName=${{ secrets.DOCKER_REPO }}

      - name: Docker push
        run: |
          docker tag ${{secrets.DOCKER_REPO}}:latest ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKER_REPO}}:latest
          docker push ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKER_REPO}}

      # 서버에서 Docker 이미지 실행
      - name: EC2 Docker Run
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker stop ${{secrets.DOCKER_REPO}}
            docker rm ${{secrets.DOCKER_REPO}}
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.DOCKER_REPO}}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.DOCKER_REPO}}:latest
            docker run -d -p 8080:8080 --name ${{secrets.DOCKER_REPO}} -e SPRING_PROFILES_ACTIVE=dev -e JASYPT_ENCRYPTOR_PASSWORD=${{secrets.JASYPT}} ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKER_REPO}}:latest